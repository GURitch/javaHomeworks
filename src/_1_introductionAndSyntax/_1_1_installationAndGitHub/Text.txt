- Создаем новый Java-проект в IDEA.


- Выбираем нужные настройки.


- Называем проект. Советуем называть проекты соответственно номеру домашнего задания, которое вы выполняете.


- У нас открылся новый проект.



На данном этапе нам не нужно в нем ничего писать, а отправить его на GitHub в таком виде.

- Для этого в верхнем окне меню нажимаем на VCS и выбираем пункт меню Create Git Repository...


- У вас откроется окно с папками для хранения проекта на локальном ПК. Нажимаем Open.



 Далее в проекте в IDEA нам нужно настроить gitignore в проекте.

- **Как сделать  .gitignore (алгоритм есть в уроке)**
    - Для этого в раскрывающемся списке проекта нажимаем на файл с расширением .iml.


    - Далее кликаем правой клавишей мыши по названию проекта и в появившемся меню выбираем Git, затем — Add to .gitignore.



      В поле файла на первой строчке пишем:

    ```java
    *.iml
    ```

    Такой же алгоритм нужно проделать с папкой idea в вашем проекте.

- Далее нам нужно сделать первый коммит. В левой панели меню IDEA вы найдете меню Commit. Нажимаем на него.


- Выделяем все файлы, которые хотим отправить на GitHub. В поле ниже пишем комментарий, например: «Мой первый коммит». Далее нажимаем на кнопку Commit and Push...


- В выпадающем окне нажимаем Cancel.


- После того, как вы написали и оформили свой проект, нужно создать репозиторий на GitHub.  Для этого в верхнем окне меню нажимаем на Git и выбираем пункт меню GitHub, далее — Share Project on GitHub.


- Появится всплывающее окно, в котором будет указано имя вашего проекта, а также адрес вашего аккаунта на GitHub. Нажимаем на Share.


- Ваш проект появится на GitHub. По умолчанию это мастер-ветка, то есть основная ветка с кодом.



А теперь, когда мы настроили мастер-ветку, нужно приступить к написанию самого кода. Для этого нам нужно создать вспомогательную ветку, в которой будет весь код храниться.

- Для этого возвращаемся в IDEА, в нижнем правом углу находим значок master и нажимаем на него.


- В открывающемся меню выбираем пункт New Branch.


- Придумываем и пишем имя новой ветки. Имя должно быть на английском.


- После этого название в нижнем правом углу с master поменяется на название вашей ветки.



Теперь мы можем писать код и выполнять задания. После того как весь код написан, нам нужно сделать коммит нашего проекта на GitHub.

Чтобы сделать коммит и пуш ветки на GitHub, но уже с другим комментарием (например: «Сделанное задание от Ани»), пройдите шаги 7–8.

Переходим в GitHub. В результате на вкладке Code у нас должно появиться два branches, то есть две ветки — мастер-ветка и ветка с вашим ДЗ с написанным кодом.

- Пример



Чтобы наставник мог прямо в коде писать вам комментарии и ОС по заданию, нужно сделать pull request — это слияние двух веток: мастер-ветки и ветки с вашим ДЗ, которую вы создали позже для того, чтобы увидеть разницу в коде.

- Для этого переходим на вкладку Pull requests.


- И нажимаем на кнопку Create pull request.


- Имейте в виду, что pull request совершается из ветки с ДЗ в мастер-ветку, а не наоборот. Обратите на это внимание — и при необходимости поменяйте ветки.


- После этого у вас откроется окно комментариев, куда вы можете написать комментарии к работе. Далее нажимаем на кнопку Create pull request.


- В адресной строке у вас будет адрес вашей домашней работы на GitHub. Прикрепите ее на платформу.